"use client";
import { use, useEffect, useState } from "react";
import Header from "../../../../../components/pages/components/layout/Header";
import Footer from "../../../../../components/pages/components/layout/Footer";
import SidebarArticle from "@/components/pages/components/SidebarArticle";
import CommentSection from "@/components/pages/components/artikel/CommentSection";
import InteractiveGallery from "@/components/pages/components/InteractiveGallery";

// You can get this from URL params, props, or context
const CURRENT_USER_ID = 123; // Replace with actual user ID from auth

export default function ArticleDetail({ params }) {
  const { id } = use(params); // ‚úÖ Unwrap promise param

  const [isMounted, setIsMounted] = useState(false);
  const [article, setArticle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [isBookmarked, setIsBookmarked] = useState(false);
  const [likes, setLikes] = useState(0);
  const [isLiked, setIsLiked] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  // Fungsi untuk fetch artikel dari API
  const fetchArticle = async (articleId, userId) => {
    try {
      setLoading(true);
      setError(null);

      // API call untuk mendapatkan artikel berdasarkan ID dan user ID
      const response = await fetch(`/api/articles/${articleId}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          // Tambahkan authorization header jika diperlukan
          // 'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const hasil = await response.json();

      if (hasil.success) {
        setArticle(hasil.data);
        // setLikes(data.article.likes || 0);
        // setIsLiked(data.article.isLikedByUser || false);
        // setIsBookmarked(data.article.isBookmarkedByUser || false);
      } else {
        throw new Error(hasil.message || "Failed to fetch article");
      }
    } catch (err) {
      console.error("Error fetching article:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Fetch artikel saat component mount
  useEffect(() => {
    if (id && CURRENT_USER_ID) {
      fetchArticle(id, CURRENT_USER_ID);
    }
  }, [id, CURRENT_USER_ID]);

  // Fungsi untuk handle like artikel
  const handleLike = async () => {
    try {
      const response = await fetch(`/api/articles/${id}/like`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId: CURRENT_USER_ID,
          action: isLiked ? "unlike" : "like",
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setLikes(data.likes);
        setIsLiked(!isLiked);
      }
    } catch (error) {
      console.error("Error toggling like:", error);
    }
  };

  // Fungsi untuk handle bookmark artikel
  const handleBookmark = async () => {
    try {
      const response = await fetch(`/api/articles/${id}/bookmark`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId: CURRENT_USER_ID,
          action: isBookmarked ? "unbookmark" : "bookmark",
        }),
      });

      if (response.ok) {
        setIsBookmarked(!isBookmarked);
      }
    } catch (error) {
      console.error("Error toggling bookmark:", error);
    }
  };

  // Loading state
  if (!isMounted || loading) {
    return (
      <div className="min-h-screen bg-white">
        <Header />
        <div className="max-w-6xl mx-auto px-4 py-5">
          <div className="animate-pulse">
            <div className="h-12 bg-gray-300 rounded mb-4"></div>
            <div className="h-64 bg-gray-300 rounded mb-4"></div>
            <div className="h-32 bg-gray-300 rounded mb-4"></div>
            <div className="h-32 bg-gray-300 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-white">
        <Header />
        <div className="max-w-6xl mx-auto px-4 py-5">
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-red-600 mb-4">Error</h2>
            <p className="text-gray-600 mb-4">{error}</p>
            <button
              onClick={() => fetchArticle(id, CURRENT_USER_ID)}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              Coba Lagi
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Jika artikel tidak ditemukan
  if (!article) {
    return (
      <div className="min-h-screen bg-white">
        <Header />
        <div className="max-w-6xl mx-auto px-4 py-5">
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-gray-600 mb-4">
              Artikel Tidak Ditemukan
            </h2>
            <p className="text-gray-500">
              Artikel dengan ID {id} tidak dapat ditemukan.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <Header />

      <main className="max-w-screen-xl mx-auto px-4 py-6">
        <div className="flex flex-col lg:flex-row">
          {/* Main content */}
          <div className="w-full lg:w-4/4 lg:pr-8">
            {/* Author info */}
            <div className="flex items-center mb-4">
              <div className="h-10 w-10 rounded-full bg-gray-300 mr-3 overflow-hidden">
                {article.author?.avatar ? (
                  <img
                    src={article.author.avatar}
                    alt={article.author.name}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full bg-gray-300"></div>
                )}
              </div>
              <div>
                <h3 className="font-medium">
                  {article.author?.name || "Unknown Author"}
                </h3>
                <div className="flex items-center text-sm text-gray-500">
                  <span>{article.timeAgo || "Unknown time"}</span>
                  <span className="mx-2">‚Ä¢</span>
                  <span>{article.createdAt || "Unknown date"}</span>
                </div>
              </div>
            </div>

            {/* Article title */}
            <h1 className="text-3xl md:text-4xl font-bold mb-6">
              {article.title}
            </h1>

            {/* Gallery Component - jika ada gambar */}
            {article.images && article.images.length > 0 && (
              <InteractiveGallery
                galleryItems={article.images}
                className="mb-8"
              />
            )}

            {/* Featured Image - jika ada */}
            {article.thumbnail_url && (
              <div className="mb-8">
                <img
                  src={article.thumbnail_url}
                  alt={article.title}
                  className="w-full h-64 object-cover rounded-lg"
                />
              </div>
            )}

            {/* Article content */}
            <div className="prose max-w-none mb-8">
              {/* Render content HTML dari API */}
              <div dangerouslySetInnerHTML={{ __html: article.content_html }} />
            </div>

            {/* Tags */}
            {article.tags && article.tags.length > 0 && (
              <div className="flex flex-wrap gap-2 mb-8">
                {article.tags.map((tag, index) => (
                  <span
                    key={index}
                    className="bg-gray-100 px-3 py-1 rounded-full text-sm"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            )}

            {/* Interaction bar */}
            <div className="flex items-center gap-4 py-4 border-y border-gray-200 mb-8">
              <button
                onClick={handleLike}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                  isLiked
                    ? "bg-red-100 text-red-600"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                <span className="text-lg">{isLiked ? "‚ù§Ô∏è" : "ü§ç"}</span>
                <span>{likes}</span>
              </button>

              <button
                onClick={handleBookmark}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                  isBookmarked
                    ? "bg-blue-100 text-blue-600"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                <span className="text-lg">{isBookmarked ? "üîñ" : "üìÑ"}</span>
                <span>Bookmark</span>
              </button>
            </div>

            {/* Comments section */}
            <CommentSection
              articleId={id}
              currentUserId={CURRENT_USER_ID}
              apiEndpoint="/api/comments"
            />
          </div>

          {/* Sidebar - uncomment jika ingin menggunakan sidebar */}
          {/* <SidebarArticle /> */}
        </div>
      </main>

      {/* Footer */}
      <Footer />
    </div>
  );
}
